% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TimeSeriesSignalPrediction.R
\name{generate_signal_response_predictions}
\alias{generate_signal_response_predictions}
\title{Time Series Signal Prediction Generator}
\usage{
generate_signal_response_predictions(
  data,
  pressure_signal_df,
  pressure_start = 3,
  prediction_size = 70,
  column_names,
  initial_columns_lags,
  predicted_column_lags,
  initial_column_names,
  initial_column_values,
  prediction_col_name,
  prediction_initial_value,
  predictor_cols,
  cost,
  nu,
  gamma = NULL,
  tolerance,
  svm_cache_size = 100,
  included_model = NULL
)
}
\arguments{
\item{data}{A dataframe containing the training data for the SVR model.}

\item{pressure_signal_df}{A dataframe that encapsulates the pressure signal.
The signal should align with the prediction size. Each row represents a
time step and contains the signal's value.}

\item{pressure_start}{An integer specifying the starting point of the pressure signal
decrease. It marks the time step from which predictions should start.}

\item{prediction_size}{A positive integer indicating the total number of predictions to
be generated.}

\item{column_names}{A character vector specifying the names of all the variables
involved, both initial and predictive.}

\item{initial_columns_lags}{An integer vector specifying the number of lags for each of
the initial variables, aligned with `initial_column_names`.}

\item{predicted_column_lags}{An integer indicating the number of lags for the predictive
variable.}

\item{initial_column_names}{A character vector that lists the names of the initial
variables. These are the variables used to derive lagged
values, but exclude the main predictive variable.}

\item{initial_column_values}{A numeric vector that provides initial values corresponding
to the `initial_column_names`.}

\item{prediction_col_name}{A single character string specifying the name of the primary
predictive variable.}

\item{prediction_initial_value}{A numeric value indicating the initial value of the
predictive variable.}

\item{predictor_cols}{Character vector of column names to include in the prediction set.}

\item{cost}{A numeric value indicating the cost parameter of the SVR model.}

\item{nu}{A numeric value indicating the nu parameter of the SVR model.}

\item{gamma}{A numeric value (optional) indicating the gamma parameter of the SVR model.}

\item{tolerance}{Numeric. SVM tolerance for stopping criterion.}

\item{svm_cache_size}{Numeric. The size of the cache for the SVM algorithm.}

\item{included_model}{(Optional) An existing SVR model that can be included for the prediction.
If NULL, a new model is trained. Defaults to NULL.}
}
\value{
A list containing five elements: `predicted_values` - a dataframe with the predicted signal,
        where each row corresponds to a time step from `pressure_start` up to `prediction_size`;
        `warnings` - any warnings generated during the max iterations of the SVR model;
        `model` - the SVR model object used for prediction;
        `predictions_all_data_cor` - a measure of the correlation between all predicted and actual values;
        and `predictions_all_data_err` - an error metric for all predicted versus actual values.
}
\description{
This function trains a Support Vector Regression (SVR) model with the
provided data and then utilizes
it to generate predictions for a response signal in the context of a time
series setup. All character variables must end with "_norm".
}
\examples{
pressure_signal_df <- data.frame(feature1_norm = rnorm(50))
prediction <- generate_signal_response_predictions(
                    data = data.frame(feature1_norm = rnorm(100),
                                      feature2_norm = rnorm(100),
                                      feature1_norm_1 = rnorm(100),
                                      feature2_norm_1 = rnorm(100)),
                    pressure_signal_df = pressure_signal_df,
                    column_names = c("feature1_norm", "feature2_norm"),
                    initial_columns_lags = c(1),
                    predicted_column_lags = NULL,
                    initial_column_names = c("feature1_norm"),
                    initial_column_values = c(1),
                    prediction_col_name = "feature2_norm",
                    prediction_initial_value = 0.5,
                    predictor_cols = c("feature1_norm"),
                    cost = 1,
                    nu = 0.5,
                    tolerance = 1)
}
